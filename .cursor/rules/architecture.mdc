---
description: 
globs: 
alwaysApply: true
---
# Rust Clean Architecture Coding Guidelines


## Project Structure Overview

```
src/
├── DI                           # Dependency Injection container
├── domain                       # Core business logic and entities
│   └── models                   # Domain models/entities
├── infrastructure               # External systems implementation
│   ├── database                 # Database connection and configuration
│   └── persistence              # Data persistence implementation
│       ├── entities             # Database-specific entity representations
│       └── repositories_impl    # Repository implementations
├── usecase                      # Application use cases
│   ├── commands                 # Command handlers (write operations)
│   ├── queries                  # Query handlers (read operations)
│   └── repositories             # Repository interfaces
└── web                          # Web-related components (API, controllers)
```

## General Architecture Rules

1. **Dependency Direction**: Dependencies should point inward. Outer layers can depend on inner layers, but not vice versa:
   - Web → Usecase → Domain
   - Infrastructure → Usecase → Domain

2. **Domain Independence**: The domain layer must not depend on any other layer.

3. **Interface Segregation**: Define interfaces in the layer that requires them, not in the layer that implements them.

## Layer-Specific Guidelines

### Domain Layer

- Contains business entities and logic.
- Must be independent of other layers and frameworks.
- Should expose error types specific to domain concerns.

```rust
// GOOD: Domain model with business logic
pub struct User {
    id: UserId,
    email: Email,
    name: Name,
    status: UserStatus,
}

impl User {
    pub fn activate(&mut self) -> Result<(), DomainError> {
        if self.status == UserStatus::Deleted {
            return Err(DomainError::CannotActivateDeletedUser);
        }
        self.status = UserStatus::Active;
        Ok(())
    }
}

// BAD: Domain model with infrastructure concerns
pub struct User {
    id: i64,  // Database-specific type
    email: String,
    name: String,
    status: i32,  // Using primitive for domain concept
}
```

### Usecase Layer

- Contains application business rules.
- Orchestrates the flow of data to and from entities.
- Divided into commands (write) and queries (read) following CQRS pattern.

#### Repositories

- Define repository interfaces that the domain layer needs.
- Use generic Rust traits.

```rust
// GOOD: Clean repository interface
pub trait UserRepository {
    fn find_by_id(&self, id: &UserId) -> Result<Option<User>, RepositoryError>;
    fn save(&self, user: &User) -> Result<(), RepositoryError>;
    fn delete(&self, id: &UserId) -> Result<(), RepositoryError>;
}

// BAD: Repository with infrastructure concerns
pub trait UserRepository {
    fn find_by_id(&self, id: &i64) -> Result<Option<User>, SqlxError>;
    // Leaking SQL-specific error type and using database primitive types
}
```

#### Commands & Queries

- Commands modify state and return minimal information.
- Queries retrieve data and don't modify state.

```rust
// GOOD: Command handler
pub struct ActivateUserCommand {
    pub user_id: UserId,
}

pub struct ActivateUserHandler<R: UserRepository> {
    repository: R,
}

impl<R: UserRepository> ActivateUserHandler<R> {
    pub async fn handle(&self, cmd: ActivateUserCommand) -> Result<(), ApplicationError> {
        let mut user = self.repository.find_by_id(&cmd.user_id)?
            .ok_or(ApplicationError::UserNotFound)?;
        
        user.activate()?;
        self.repository.save(&user)?;
        
        Ok(())
    }
}

// GOOD: Query handler
pub struct GetUserQuery {
    pub user_id: UserId,
}

pub struct GetUserHandler<R: UserRepository> {
    repository: R,
}

impl<R: UserRepository> GetUserHandler<R> {
    pub async fn handle(&self, query: GetUserQuery) -> Result<UserDTO, ApplicationError> {
        let user = self.repository.find_by_id(&query.user_id)?
            .ok_or(ApplicationError::UserNotFound)?;
        
        Ok(UserDTO::from(user))
    }
}
```

### Infrastructure Layer

- Implements interfaces defined by inner layers.
- Contains concrete implementations of repositories, external services, etc.

```rust
// GOOD: Repository implementation with proper error handling
pub struct SqlxUserRepository {
    pool: Pool<Postgres>,
}

impl UserRepository for SqlxUserRepository {
    fn find_by_id(&self, id: &UserId) -> Result<Option<User>, RepositoryError> {
        // Database operation with proper error mapping
        let db_entity = match sqlx::query_as::<_, UserEntity>("SELECT * FROM users WHERE id = $1")
            .bind(id.value())
            .fetch_optional(&self.pool)
            .await
        {
            Ok(entity) => entity,
            Err(err) => return Err(RepositoryError::DatabaseError(err.to_string())),
        };
        
        // Map to domain entity
        Ok(db_entity.map(User::from))
    }
}
```

#### Entities vs. Domain Models

- Database entities (in `persistence/entities`) represent database table structures.
- They should be mapped to/from domain models.

```rust
// Database entity
pub struct UserEntity {
    id: i64,
    email: String,
    name: String,
    status: i32,
}

// Mapping to domain model
impl From<UserEntity> for User {
    fn from(entity: UserEntity) -> Self {
        User {
            id: UserId::new(entity.id),
            email: Email::new(entity.email).expect("Invalid email in database"),
            name: Name::new(entity.name).expect("Invalid name in database"),
            status: UserStatus::from_i32(entity.status),
        }
    }
}
```

### DI (Dependency Injection)

- Wires up interfaces with concrete implementations.
- Should be as close to the application entry point as possible.

```rust
pub struct Container {
    pub user_repository: Arc<dyn UserRepository + Send + Sync>,
    pub activate_user_handler: Arc<ActivateUserHandler<SqlxUserRepository>>,
    pub get_user_handler: Arc<GetUserHandler<SqlxUserRepository>>,
    // Other dependencies
}

impl Container {
    pub fn new(db_pool: Pool<Postgres>) -> Self {
        let user_repository = Arc::new(SqlxUserRepository::new(db_pool.clone()));
        
        let activate_user_handler = Arc::new(ActivateUserHandler::new(user_repository.clone()));
        let get_user_handler = Arc::new(GetUserHandler::new(user_repository.clone()));
        
        Self {
            user_repository,
            activate_user_handler,
            get_user_handler,
        }
    }
}
```

### Web Layer

- Handles HTTP requests, validation, and serialization.
- Delegates to use cases for business logic.

```rust
pub async fn activate_user(
    Path(user_id): Path<String>,
    State(container): State<Arc<Container>>,
) -> impl IntoResponse {
    // Convert request parameters to domain types
    let user_id = match UserId::from_string(&user_id) {
        Ok(id) => id,
        Err(_) => return (StatusCode::BAD_REQUEST, "Invalid user ID").into_response(),
    };
    
    // Delegate to use case
    let cmd = ActivateUserCommand { user_id };
    match container.activate_user_handler.handle(cmd).await {
        Ok(_) => StatusCode::NO_CONTENT.into_response(),
        Err(ApplicationError::UserNotFound) => 
            (StatusCode::NOT_FOUND, "User not found").into_response(),
        Err(_) => 
            (StatusCode::INTERNAL_SERVER_ERROR, "Server error").into_response(),
    }
}
```

## SOLID Principles Application

### 1. Single Responsibility Principle

- Each module, struct, and function should have only one reason to change.
- Separate concerns into different modules.

```rust
// GOOD: Single responsibility
pub mod user_validation {
    pub fn validate_email(email: &str) -> bool { /* ... */ }
    pub fn validate_password(password: &str) -> bool { /* ... */ }
}

pub mod user_authentication {
    pub fn authenticate(credentials: &Credentials) -> Result<AuthToken, AuthError> { /* ... */ }
    pub fn verify_token(token: &AuthToken) -> Result<UserId, AuthError> { /* ... */ }
}

// BAD: Mixed responsibilities
pub mod user {
    pub fn validate_email(email: &str) -> bool { /* ... */ }
    pub fn authenticate(credentials: &Credentials) -> Result<AuthToken, AuthError> { /* ... */ }
    // Mixing validation and authentication concerns
}
```

### 2. Open/Closed Principle

- Software entities should be open for extension but closed for modification.
- Use traits and generic programming.

```rust
// GOOD: Open for extension through traits
pub trait Notifier {
    fn notify(&self, user: &User, message: &str) -> Result<(), NotificationError>;
}

pub struct EmailNotifier;
pub struct SmsNotifier;

impl Notifier for EmailNotifier {
    fn notify(&self, user: &User, message: &str) -> Result<(), NotificationError> {
        // Email implementation
    }
}

impl Notifier for SmsNotifier {
    fn notify(&self, user: &User, message: &str) -> Result<(), NotificationError> {
        // SMS implementation
    }
}

// Usage allows adding new notifiers without changing existing code
pub struct NotificationService<T: Notifier> {
    notifier: T,
}
```

### 3. Liskov Substitution Principle

- Subtypes must be substitutable for their base types.
- Ensure trait implementations follow the contract.

```rust
// GOOD: Proper trait implementation following contract
pub trait UserStorage {
    // Contract: Returns None if user doesn't exist
    fn get_user(&self, id: &UserId) -> Result<Option<User>, StorageError>;
}

impl UserStorage for DatabaseStorage {
    fn get_user(&self, id: &UserId) -> Result<Option<User>, StorageError> {
        // Correctly returns None for non-existent users
        Ok(self.query_user(id).await?)
    }
}

// BAD: Violating contract
impl UserStorage for BrokenStorage {
    fn get_user(&self, id: &UserId) -> Result<Option<User>, StorageError> {
        // Incorrectly throws error for non-existent users
        let user = self.find_user(id)?;
        if user.is_none() {
            return Err(StorageError::UserNotFound);  // Violates contract
        }
        Ok(user)
    }
}
```

### 4. Interface Segregation Principle

- Clients should not be forced to depend on methods they do not use.
- Create specific, focused traits.

```rust
// GOOD: Segregated interfaces
pub trait UserReader {
    fn find_by_id(&self, id: &UserId) -> Result<Option<User>, RepositoryError>;
    fn find_by_email(&self, email: &Email) -> Result<Option<User>, RepositoryError>;
}

pub trait UserWriter {
    fn save(&self, user: &User) -> Result<(), RepositoryError>;
    fn delete(&self, id: &UserId) -> Result<(), RepositoryError>;
}

// Services can depend on only what they need
pub struct UserQueryService<R: UserReader> {
    repository: R,
}

// BAD: Monolithic interface forcing unnecessary dependencies
pub trait UserRepository {
    fn find_by_id(&self, id: &UserId) -> Result<Option<User>, RepositoryError>;
    fn find_by_email(&self, email: &Email) -> Result<Option<User>, RepositoryError>;
    fn save(&self, user: &User) -> Result<(), RepositoryError>;
    fn delete(&self, id: &UserId) -> Result<(), RepositoryError>;
    fn perform_maintenance(&self) -> Result<(), RepositoryError>;  // Not needed by most clients
}
```

### 5. Dependency Inversion Principle

- High-level modules should not depend on low-level modules; both should depend on abstractions.
- Abstractions should not depend on details; details should depend on abstractions.

```rust
// GOOD: Depending on abstractions
pub struct UserService<R: UserRepository> {
    repository: R,
}

// Can be used with any implementation of UserRepository
let service = UserService::new(MockUserRepository::new());
let service = UserService::new(SqlUserRepository::new(db_pool));

// BAD: Depending on concrete implementation
pub struct UserService {
    repository: SqlUserRepository,  // Directly depends on SQL implementation
}
```

## DRY (Don't Repeat Yourself) Guidelines

1. **Extract Common Functionality**:
   - Use traits for common behavior.
   - Create utility functions for repeated operations.

```rust
// GOOD: Reusable pagination logic
pub struct PaginationParams {
    pub page: u32,
    pub per_page: u32,
}

impl PaginationParams {
    pub fn offset(&self) -> u32 {
        (self.page - 1) * self.per_page
    }
    
    pub fn limit(&self) -> u32 {
        self.per_page
    }
}

// Can be used across different repositories
pub trait PaginatedRepository<T> {
    fn find_paginated(&self, params: &PaginationParams) -> Result<Vec<T>, RepositoryError>;
    fn count(&self) -> Result<u64, RepositoryError>;
}
```

2. **Macros for Repetitive Patterns**:
   - Use Rust macros to eliminate boilerplate code.

```rust
// GOOD: Macro for repository error mapping
macro_rules! map_db_error {
    ($result:expr) => {
        match $result {
            Ok(value) => Ok(value),
            Err(err) => {
                if let Some(db_err) = err.downcast_ref::<sqlx::Error>() {
                    match db_err {
                        sqlx::Error::RowNotFound => Err(RepositoryError::NotFound),
                        sqlx::Error::Database(db_err) if db_err.constraint().is_some() => {
                            Err(RepositoryError::Constraint(db_err.constraint().unwrap().to_string()))
                        }
                        _ => Err(RepositoryError::Database(err.to_string())),
                    }
                } else {
                    Err(RepositoryError::Unknown(err.to_string()))
                }
            }
        }
    };
}
```

3. **Shared Error Handling**:
   - Create standardized error types that can be reused.

```rust
// GOOD: Shared error type with mapping capabilities
#[derive(Debug, thiserror::Error)]
pub enum ApplicationError {
    #[error("Entity not found")]
    NotFound,
    
    #[error("Validation error: {0}")]
    Validation(String),
    
    #[error("Repository error: {0}")]
    Repository(#[from] RepositoryError),
    
    #[error("Domain error: {0}")]
    Domain(#[from] DomainError),
}
```

## Code Commenting Guidelines

### 1. Document Public Interfaces

All public functions, structs, and traits should have documentation comments:

```rust
/// Represents a user in the system
///
/// A user is an authenticated entity that can perform actions
/// within the application based on assigned permissions.
pub struct User {
    // Fields...
}

impl User {
    /// Creates a new user with the given data
    ///
    /// # Arguments
    /// * `email` - User's email address (must be valid format)
    /// * `name` - User's display name
    ///
    /// # Returns
    /// A new User instance or error if validation fails
    ///
    /// # Errors
    /// Returns `DomainError::ValidationError` if email or name doesn't meet requirements
    pub fn new(email: String, name: String) -> Result<Self, DomainError> {
        // Implementation...
    }
}
```

### 2. Document Complex Logic

Add explanatory comments for complex business rules or algorithms:

```rust
fn calculate_pricing(user: &User, product: &Product) -> Money {
    let base_price = product.base_price();
    
    // Apply volume discount if user has purchased more than 10 items
    // Volume discount follows a tiered structure:
    // - 10-20 items: 5% discount
    // - 21-50 items: 10% discount
    // - 51+ items: 15% discount
    let purchase_count = user.purchase_count();
    let discount_percentage = if purchase_count > 50 {
        0.15
    } else if purchase_count > 20 {
        0.10
    } else if purchase_count > 10 {
        0.05
    } else {
        0.0
    };
    
    // Additional special discount for premium users
    let special_discount = if user.is_premium() {
        base_price * Decimal::new(0, 2) // 2%
    } else {
        Decimal::zero()
    };
    
    base_price * (Decimal::one() - Decimal::from_f32(discount_percentage).unwrap()) - special_discount
}
```

### 3. TODO/FIXME Comments

Use standardized TODO/FIXME comments for work in progress:

```rust
// TODO(github-username): Implement caching to improve performance
fn fetch_user_data(id: &UserId) -> Result<UserData, ServiceError> {
    // Current implementation without caching
}

// FIXME: This approach can lead to race conditions under high load
fn process_transaction(tx: Transaction) -> Result<(), TransactionError> {
    // Current implementation
}
```

### 4. Module-Level Documentation

Document each module with a top-level comment explaining its purpose:

```rust
//! User domain module
//!
//! This module contains the core domain entities and business logic
//! related to users in the system. It defines the User entity,
//! associated value objects (Email, UserId), and domain services
//! for user-related operations.

mod user;
mod email;
mod user_id;
mod user_service;

pub use user::User;
pub use email::Email;
pub use user_id::UserId;
pub use user_service::UserService;
```

### 5. Test Documentation

Document test intentions clearly:

```rust
#[cfg(test)]
mod tests {
    use super::*;
    
    /// Tests that user activation fails when user is in deleted state
    #[test]
    fn cannot_activate_deleted_user() {
        // Test implementation
    }
    
    /// Tests that email validation properly rejects invalid formats
    #[test]
    fn email_validation_rejects_invalid_format() {
        // Test implementation
    }
}
```

## Rust-Specific Best Practices

1. **Type Safety**: Use newtype pattern for domain concepts
2. **Error Handling**: Use proper error types with thiserror
3. **Immutability**: Prefer immutable data where possible
4. **Ownership**: Follow Rust's ownership rules for clear resource management

```rust
// GOOD: Newtype pattern for type safety
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct UserId(Uuid);

impl UserId {
    pub fn new() -> Self {
        Self(Uuid::new_v4())
    }
    
    pub fn value(&self) -> &Uuid {
        &self.0
    }
}
```